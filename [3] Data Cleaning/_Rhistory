print(“a.b”)
print(“a.b”)
print(“a\.b”)
library(stringr)
print(“a\\.b”)
print(“a.b”)
library(stringr)
print(“a\\.b”)
cat(“a\\.b”)
cat(“a.b”)
cat(“a\\.b”)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
attach(Default)
num_of_sample = dim(Default)[1]
set.seed(1)
train=sample(totalrow, totalrow/2)
totalrow=dim(Default)[1]
set.seed(1)
set.seed(1)
train=sample(totalrow, totalrow/2)
mlr.fit = glm(default ~ income + balance, data = Default, subset = train, family = 'binomial')
mlr.pred = predict(mlr.fit, Default[-train,], type = 'response')
mlr.validation = ifelse(mlr.pred > 0.5, 'Yes', 'No')
validation_error = mean(mlr.validation != Default[-train,]$default)
print(validation_error)
for(i in 1:3){
train=sample(totalrow, totalrow/2)
mlr.fit = glm(default ~ income + balance, data = Default, subset = train, family = 'binomial')
mlr.pred = predict(mlr.fit, Default[-train,], type = 'response')
mlr.validation = ifelse(mlr.pred > 0.5, 'Yes', 'No')
validation_error = mean(mlr.validation != Default[-train,]$default)
print(validation_error)
}
prob = c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
ifelse((sum(prob>=0.5)/length(prob))>0.5, "Red",
ifelse((sum(prob>=0.5)/length(prob))==0.5, "Draw", "Green"))
prob = c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
ifelse(mean(prob)>0.5, "Red",
ifelse(mean(prob)==0.5, "Draw", "Green"))
library(tree)
install.packages("tree")
install.packages("randomForest")
library(ISLR)
library(tree)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
?sample()
train=sample(1:nrow(Carseats), 200)
Carseats.train = Carseats[train,]
tree.carseats = tree(Sales~., Carseats, subset=train)
tree.pred = predict(tree.carseats, Carseats[-train,])
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
Carseats.test = Carseats[-train,]
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test ## 4.844991
library(ISLR)
library(tree)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train = Carseats[train,]
Carseats.test = Carseats[-train,]
tree.carseats = tree(Sales~., Carseats, subset=train)
tree.pred = predict(tree.carseats, Carseats[-train,])
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test ## 4.844991
set.seed(1)
cv.carseats <- cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red")
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
tree.carseats = tree(Sales~., Carseats, subset=train)
tree.pred = predict(tree.carseats, Carseats[-train,])
plot(tree.carseats)
text(tree.carseats, pretty=0)
knitr::opts_chunk$set(echo = TRUE)
library(tree)
regtree <- tree(Sales ~ ., data = trainset)
summary(regtree)
train <- sample(1:nrow(Carseats), 200)
trainset <- Carseats[train, ]
testset <- Carseats[-train, ]
regtree <- tree(Sales ~ ., data = trainset)
summary(regtree)
plot(regtree)
text(regtree, pretty = 0)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train = Carseats[train,]
Carseats.test = Carseats[-train,]
tree.carseats = tree(Sales~., Carseats, subset=train)
summary(tree.carseats)
tree.pred = predict(tree.carseats, Carseats[-train,])
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot.new()
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
text(tree.carseats, pretty=0)}
plot(tree.carseats)+
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
set.seed(1)
cv.carseats <- cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red")
prune.carseats=prune.tree(tree.carseats,best=12)
plot(prune.carseats)
text(prune.carseats,pretty=0)
MSE_test
set.seed(1)
cv.carseats <- cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red")
prune.carseats=prune.tree(tree.carseats,best=12)
prune.carseats
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats[-train,])
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test
tree.carseats = tree(Sales~., Carseats, subset=train)
summary(tree.carseats)
tree.pred = predict(tree.carseats, Carseats[-train,])
plot(tree.carseats)
text(tree.carseats, pretty=0)
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test
set.seed(1)
cvfortree <- cv.tree(regtree)
plot(cvfortree$size, cvfortree$dev, type = "b")
minlev <- which.min(cvfortree$dev)
prunetree <- prune.tree(regtree, best = 15)
plot(prunetree)
text(prunetree, pretty = 0)
pred <- predict(prunetree, newdata = testset)
mean((pred - testset$Sales)^2)
cvfortree <- cv.tree(regtree)
plot(cvfortree$size, cvfortree$dev, type = "b")
minlev <- which.min(cvfortree$dev)
library(dplyr)
library(lubridate)
library(data.table)
setwd("C:/Users/jyuro/Desktop/Project3 -Credit Card Applications Fraud/[3] Data Cleaning")
setwd("C:/Users/jyuro/Desktop/Project3 -Credit Card Applications Fraud/[3] Data Cleaning")
df <- read.csv('ApplicationsFrivLRemo.csv')
#df <- df[1:10000,]
summary(df)
#df <- df[1:10000,]
summary(df)
summary(df)
df$nameDOB <- paste(as.character(df$firstname), as.character(df$lastname), as.character(df$dob), sep = '_')
View(df)
## (2)full_address
df$fulladdress <- paste(as.character(df$address), as.character(df$zip5), sep = '_')
names(df)[1] = paste('record')
?paste
col <- c("record", "ssn", "fulladdress", "nameDOB", "homephone", "date" ,
"fraud_label", "firstname", "lastname")
df <- df[, col]
df$date <- ymd(df$date)
df1 <- df[df$date <= '2016-10-31',]
rm(col)
getwd()
combinations <- combn(c('ssn', 'fulladdress', 'firstname', 'lastname', 'nameDOB', 'homephone'), m = 2, simplify = FALSE)
View(combinations)
entities <- c('ssn', 'fulladdress', 'nameDOB', 'homephone')
days_since_last <- function(groupby){
#create a function that can create 'Days since variables' for one entity/comb
last_time <- df %>%
arrange_(c(groupby, 'date')) %>%
group_by_(groupby) %>%
mutate(rank = row_number() - 1)
last_time$rank_1 <- last_time$rank + 1
temp_1 <- last_time %>%
select(c(groupby, 'rank', 'date'))
temp_2 <- last_time %>%
select(c(groupby, 'rank_1', 'date'))
temp_3 <- merge(temp_1,
temp_2,
by.x = c(groupby, 'rank'),
by.y = c(groupby, 'rank_1'),
all = TRUE)
rm(temp_1, temp_2)
temp_3 <- temp_3 %>%
filter(!(is.na(date.x))) %>%
mutate(diff_date = date.x - date.y) %>%
select(c(groupby, 'date.x', 'rank', 'diff_date'))
last_time <- merge(last_time,
temp_3,
by.x = c(groupby, 'date', 'rank'),
by.y = c(groupby, 'date.x', 'rank')) %>%
select(c('record', 'diff_date'))
rm(temp_3)
return(last_time)
}
#use the fucntion created for each entity
for(entity in entities){
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
}
library(dplyr)
library(lubridate)
library(data.table)
last_time <- merge(last_time,
temp_3,
by.x = c(groupby, 'date', 'rank'),
by.y = c(groupby, 'date.x', 'rank')) %>%
select(c('record', 'diff_date'))
days_since_last <- function(groupby){
#create a function that can create 'Days since variables' for one entity/comb
last_time <- df %>%
arrange_(c(groupby, 'date')) %>%
group_by_(groupby) %>%
mutate(rank = row_number() - 1)
last_time$rank_1 <- last_time$rank + 1
temp_1 <- last_time %>%
select(c(groupby, 'rank', 'date'))
temp_2 <- last_time %>%
select(c(groupby, 'rank_1', 'date'))
temp_3 <- merge(temp_1,
temp_2,
by.x = c(groupby, 'rank'),
by.y = c(groupby, 'rank_1'),
all = TRUE)
rm(temp_1, temp_2)
temp_3 <- temp_3 %>%
filter(!(is.na(date.x))) %>%
mutate(diff_date = date.x - date.y) %>%
select(c(groupby, 'date.x', 'rank', 'diff_date'))
last_time <- merge(last_time,
temp_3,
by.x = c(groupby, 'date', 'rank'),
by.y = c(groupby, 'date.x', 'rank')) %>%
select(c('record', 'diff_date'))
rm(temp_3)
return(last_time)
}
#use the fucntion created for each entity
for(entity in entities){
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
}
View(ssn_last_day_since)
#use the fucntion created for each entity
for(entity in entities){
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
}
install.packages("progress")
install.packages("tcltk")
library(tcltk)
u <- 1:2000
#开启进度条
pb <- tkProgressBar("进度","已完成 %", 0, 100)
for(i in u) {
info<- sprintf("已完成 %d%%", round(i*100/length(u)))
setTkProgressBar(pb, i*100/length(u), sprintf("进度 (%s)", info),info)
}
#关闭进度条
close(pb)
library(tcltk)
u <- 1:2000
#开启进度条
pb <- tkProgressBar("进度","已完成 %", 0, 100)
#use the fucntion created for each entity
for(entity in entities){
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
}
library(progress)
pb <- progress_bar$new(total = 100)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
?tcltk
pb <- tkProgressBar("进度","已完成 %", 0, 100)
for(entity in entities) {
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
info<- sprintf("已完成 %d%%", round(i*100/length(u)))
setTkProgressBar(pb, i*100/length(u), sprintf("进度 (%s)", info),info)
}
pb <- tkProgressBar("进度","已完成 %", 0, 100)
for(entity in entities) {
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
info<- sprintf("已完成 %d%%", round(i*100/length(entities)))
setTkProgressBar(pb, i*100/length(entities), sprintf("进度 (%s)", info),info)
}
pb <- tkProgressBar("进度","已完成 %", 0, 100)
for(entity in entities) {
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
info<- sprintf("已完成 %d%%", round(i*100/4))
setTkProgressBar(pb, i*100/4, sprintf("进度 (%s)", info),info)
}
library(progress)
pb <- progress_bar$new(total = 100)
for (i in 1:100) {
pb$tick()
Sys.sleep(1 / 100)
}
library(progress)
pb <- progress_bar$new(
format = "  完成百分比 [:bar] :percent 剩余时间: :eta",
total = 4, clear = FALSE, width= 60)
for(entity in entities) {
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
pb$tick()
Sys.sleep(1 / 100)
}
#use the fucntion created for each entity
for(entity in entities){
assign(paste0(entity, '_last_day_since'), days_since_last(entity))
}
assign(paste0(comb[1], '_', comb[2]), days_since_last(comb))
#use the fucntion created for each comb
for(comb in combinations){
assign(paste0(comb[1], '_', comb[2]), days_since_last(comb))
}
View(days_since_last)
# join tables created to one table
last_time <- data.frame(record = df$record)
last_time$diff_date <- -1
for(entity in entities){
temp <- get(paste0(entity, '_last_day_since'))
last_time <- merge(last_time, temp, by = 'record', suffixes=c('', paste0('.', entity)))
}
for(comb in combinations){
temp <- get(paste0(comb[1], '_', comb[2]))
last_time <- merge(last_time, temp, by = 'record', suffixes=c('', paste0('.', paste0(comb[1], '_', comb[2]))))
}
