print(“a.b”)
print(“a.b”)
print(“a\.b”)
library(stringr)
print(“a\\.b”)
print(“a.b”)
library(stringr)
print(“a\\.b”)
cat(“a\\.b”)
cat(“a.b”)
cat(“a\\.b”)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
attach(Default)
num_of_sample = dim(Default)[1]
set.seed(1)
train=sample(totalrow, totalrow/2)
totalrow=dim(Default)[1]
set.seed(1)
set.seed(1)
train=sample(totalrow, totalrow/2)
mlr.fit = glm(default ~ income + balance, data = Default, subset = train, family = 'binomial')
mlr.pred = predict(mlr.fit, Default[-train,], type = 'response')
mlr.validation = ifelse(mlr.pred > 0.5, 'Yes', 'No')
validation_error = mean(mlr.validation != Default[-train,]$default)
print(validation_error)
for(i in 1:3){
train=sample(totalrow, totalrow/2)
mlr.fit = glm(default ~ income + balance, data = Default, subset = train, family = 'binomial')
mlr.pred = predict(mlr.fit, Default[-train,], type = 'response')
mlr.validation = ifelse(mlr.pred > 0.5, 'Yes', 'No')
validation_error = mean(mlr.validation != Default[-train,]$default)
print(validation_error)
}
prob = c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
ifelse((sum(prob>=0.5)/length(prob))>0.5, "Red",
ifelse((sum(prob>=0.5)/length(prob))==0.5, "Draw", "Green"))
prob = c(0.1, 0.15, 0.2, 0.2, 0.55, 0.6, 0.6, 0.65, 0.7, 0.75)
ifelse(mean(prob)>0.5, "Red",
ifelse(mean(prob)==0.5, "Draw", "Green"))
library(tree)
install.packages("tree")
install.packages("randomForest")
library(ISLR)
library(tree)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
?sample()
train=sample(1:nrow(Carseats), 200)
Carseats.train = Carseats[train,]
tree.carseats = tree(Sales~., Carseats, subset=train)
tree.pred = predict(tree.carseats, Carseats[-train,])
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
Carseats.test = Carseats[-train,]
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test ## 4.844991
library(ISLR)
library(tree)
attach(Carseats)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train = Carseats[train,]
Carseats.test = Carseats[-train,]
tree.carseats = tree(Sales~., Carseats, subset=train)
tree.pred = predict(tree.carseats, Carseats[-train,])
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test ## 4.844991
set.seed(1)
cv.carseats <- cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red")
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
tree.carseats = tree(Sales~., Carseats, subset=train)
tree.pred = predict(tree.carseats, Carseats[-train,])
plot(tree.carseats)
text(tree.carseats, pretty=0)
knitr::opts_chunk$set(echo = TRUE)
library(tree)
regtree <- tree(Sales ~ ., data = trainset)
summary(regtree)
train <- sample(1:nrow(Carseats), 200)
trainset <- Carseats[train, ]
testset <- Carseats[-train, ]
regtree <- tree(Sales ~ ., data = trainset)
summary(regtree)
plot(regtree)
text(regtree, pretty = 0)
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.train = Carseats[train,]
Carseats.test = Carseats[-train,]
tree.carseats = tree(Sales~., Carseats, subset=train)
summary(tree.carseats)
tree.pred = predict(tree.carseats, Carseats[-train,])
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot.new()
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
text(tree.carseats, pretty=0)}
plot(tree.carseats)+
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
set.seed(1)
cv.carseats <- cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red")
prune.carseats=prune.tree(tree.carseats,best=12)
plot(prune.carseats)
text(prune.carseats,pretty=0)
MSE_test
set.seed(1)
cv.carseats <- cv.tree(tree.carseats)
plot(cv.carseats$size, cv.carseats$dev, type = "b")
tree.min <- which.min(cv.carseats$dev)
points(cv.carseats$size[tree.min], cv.carseats$dev[tree.min], col = "red")
prune.carseats=prune.tree(tree.carseats,best=12)
prune.carseats
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats[-train,])
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test
tree.carseats = tree(Sales~., Carseats, subset=train)
summary(tree.carseats)
tree.pred = predict(tree.carseats, Carseats[-train,])
plot(tree.carseats)
text(tree.carseats, pretty=0)
MSE_test = mean((tree.pred - Carseats.test$Sales)^2)
MSE_test
set.seed(1)
cvfortree <- cv.tree(regtree)
plot(cvfortree$size, cvfortree$dev, type = "b")
minlev <- which.min(cvfortree$dev)
prunetree <- prune.tree(regtree, best = 15)
plot(prunetree)
text(prunetree, pretty = 0)
pred <- predict(prunetree, newdata = testset)
mean((pred - testset$Sales)^2)
cvfortree <- cv.tree(regtree)
plot(cvfortree$size, cvfortree$dev, type = "b")
minlev <- which.min(cvfortree$dev)
library(dplyr)
library(lubridate)
library(data.table)
library(hflights)
as.tibble(hflights)
library(dplyr)
as.tibble(hflights)
as_tibble(hflights)
ncol(hflights)
tbl=as_tibble(hflights)
View(tbl)
View(tbl)
library(xgboost)
library(MASS)
library(caret)
library(dplyr)
setwd("C:/Users/jyuro/Desktop/Project3/[3] feature selection")
train=read.csv("TrTe21VarWithFraud_Zscaled.csv")
test=read.csv("validation21VarWithFraud_Zscaled.csv")
train$X=NULL
test$X=NULL
View(tbl)
filter(hflights, DepTime<500|ArrTime>2200)
c2=mutate(hflights,paste(Year,Month,DayofMonth,sep='-'))
View(c2)
setwd("C:/Users/jyuro/Desktop/Project3 -Credit Card Applications Fraud/[5] feature selection")
trvali=read.csv("TrTe21VarWithFraud_Zscaled.csv")
test=read.csv("validation21VarWithFraud_Zscaled.csv")
index=sample(1:nrow(trvali), 0.7nrow(trvali))
index=sample(1:nrow(trvali), 0.7*nrow(trvali))
train=trvali[index,]
vali=trvali[-index,]
View(train)
View(trvali)
View(trvali)
View(trvali)
glm.fit=glm(Fraudlabel~.,data=trvali,family=binomial)
glm.fit=glm(FraudLabel~.,data=trvali,family=binomial)
summary(glm.fit)
coef=coef(glm.fit)
coef=max(coef(glm.fit))
coef=coef(glm.fit)
coef=summary(glm.fit)$coef
View(coef)
coef=data.frame(summary(glm.fit)$coef)
View(coef)
delete=max(coef(glm.fit))
trvali=trvali[,-]
which(coef=delete)
which(coef==delete)
delete=max(coef[,4])
vardelete = which(coef==max(coef[,4]))
which(coef==max(coef[,4]))
coef = data.frame(summary(glm.fit)$coef)
which(coef==max(coef[,4]))
max(coef[,4])
rownames(coef)[which(coef==max(coef[,4]))]
hich(coef==max(coef[,4]))
which(coef==max(coef[,4]))
which(coef[,4]==max(coef[,4]))
setwd("C:/Users/jyuro/Desktop")
data <- read.csv('r_test_2.csv')
head(data)
View(data)
data <- read.csv('r_test_2.csv', header = TRUE, stringsAsFactors = FALSE)
View(data)
data <- read.csv('r_test_2.csv')
View(data)
data <- read.csv('r_test_2.csv', header = TRUE, stringsAsFactors = FALSE)
View(data)
data1 <- read.csv('r_test_2.csv')
data <- read.csv('r_test_2.csv', header = TRUE, stringsAsFactors = FALSE)
View(data)
View(data1)
mean = mean(data$age)
mean = mean(data$age,na.rm = TRUE)
data$age=ifelse(data$age=='',mean,)
mean_age <- mean(data$age, na.rm = TRUE)
kp <- is.na(data$age)
data$age[kp] = mean_age
data <- read.csv('r_test_2.csv')
data$age=ifelse(data$age=='',mean,data$age)
mean = mean(data$age,na.rm = TRUE)
data$age=ifelse(data$age=='',mean,data$age)
View(data)
mean = mean(data$age,na.rm = TRUE)
data$age=ifelse(data$age==NA,mean,data$age)
data$age=ifelse(is.na(data$age),mean,data$age)
is.na(data$age)
data$age=ifelse(is.na(data$age),mean,1)
data <- filter(data,gender=='')
data <- read.csv('r_test_2.csv')
data <- filter(data,gender=='')
data <- filter(data,gender!='')
data <- read.csv('r_test_2.csv', header = TRUE, stringsAsFactors = FALSE)
data <- filter(data,gender!='')
View(data)
mean = mean(data$age,na.rm = TRUE)
data$age=ifelse(is.na(data$age),mean,data$age)
View(data1)
data %>%
filter(highest_education!='high_school') %>%
group_by(highest_education, gender)%>%
summarise(avg=mean(is_marriage)) %>%
arrange(desc(avg))
data %>%
filter(highest_education != 'high_school') %>%
group_by(highest_education, gender) %>%
summarise(marriage_rate = mean(is_marriage)) %>%
arrange(-marriage_rate)
lm.fit=lm(expense~.,data=data)
summary(lm.fit)
# covert gender to numeric
data$is_male <- data$gender == 'male'
# convert age highest_education to dummy
data$is_master <- data$highest_education == 'master'
data$is_college <- data$highest_education == 'college'
lm.fit$coefficients
coef(lm.fit)
summary(glm.fit)$coef
summary(lm.fit)$coef
# setwd("/Users/cchen15/Downloads/Personal Material/Yurong Jiang/Project3 -Credit Card Applications Fraud/[5] feature selection")
setwd("C:/Users/jyuro/Desktop/Project3 -Credit Card Applications Fraud/[5] feature selection")
trvali=read.csv("TrTe21VarWithFraud_Zscaled.csv")
test=read.csv("validation21VarWithFraud_Zscaled.csv")
# logistic regression
glm.fit = glm(FraudLabel~., data = trvali, family = binomial)
coef = data.frame(summary(glm.fit)$coef)
while (max(coef[, 4]) > 0.05){
deletevar = rownames(coef)[which(coef[, 4] == max(coef[, 4]))]
trvali = trvali[, !(colnames(trvali) == deletevar)]
glm.fit = glm(FraudLabel~., data = trvali, family = binomial)
coef = data.frame(summary(glm.fit)$coef)
}
coef
summary(glm.fit)
